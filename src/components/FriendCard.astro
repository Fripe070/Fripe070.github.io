---
export interface Props {
    names: [string, ...string[]];
    birthTimestamp?: Date;
    avatar: string;
    pixelated?: boolean
    link?: string;
    background: string;
};

const { 
    names, 
    birthTimestamp, 
    avatar, 
    pixelated = true, 
    link,
    background,
} = Astro.props;
---

<a class="card" href={link} style={{"--user-background": background,}}>
    <slot name="background" />

    <div class="avatar" style={{ backgroundImage: `url(${avatar})` }} class:list={pixelated ? 'pixelated' : ''}>
        {birthTimestamp !== undefined && (
            <span class="age"> {(() => {
                return Math.floor(
                    (new Date().getTime() - birthTimestamp.getTime())
                    / (1000 * 60 * 60 * 24 * 365.25)
                );
            })()}
            </span>
        )}
    </div>
    <div class="content">
        <span class="names">
            <span>{names[0]}</span>
            {names.length > 1 && " / " 
            + names.slice(1).join(" / ")}
        </span>
        
        {Astro.slots.default !== undefined && (
            <div class="description">
                <slot />
            </div>
        )}
    </div>
</a>

<style lang="scss">
    .card {
        --border-rad: 0ch;
        --padding: 1ch;

        position: relative;
        width: fit-content;
        min-width: 30ch;
        border-radius: var(--border-rad);
        overflow: hidden;
        padding: var(--padding);
        display: flex;
        flex-direction: row;
        gap: var(--padding);

        > .content {
            display: flex;
            flex-direction: column;
            gap: var(--padding);
        }

        background: var(--user-background);
        background-size: cover;
        background-position: center;

        > * {
            z-index: 2;
        }

        text-decoration: none;
        color: var(--text-normal);
    }

    .background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
    }

    .avatar {
        width: 10ch;
        height: 10ch;
        border-radius: calc(var(--border-rad) - var(--padding));
        background-image: url({avatar});
        background-size: cover;
        background-position: center;
        position: relative;
        overflow: hidden;

        .age {
            position: absolute;
            bottom: 0;
            right: 0;
            border-top-left-radius: calc(var(--border-rad) - var(--padding));
            backdrop-filter: blur(1ch) brightness(0.75);
            padding: 0.25ch;
        }
    }
    .pixelated {
        image-rendering: pixelated;
    }
    .names {
        font-size: 1.5em;
        color: var(--text-normal);
        :first-child {
            font-weight: bold;
        }
    }
    
</style>
