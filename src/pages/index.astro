---
import Layout from '../layouts/TerminalLayout.astro';
---

<Layout title="">
	<div id="main-content" contenteditable="true" spellcheck="false">
		# Hello! I'm Fripe, a developer and student.
		<br/>
	</div>

	<div id="vim-bar" style="--mode-bg: var(--one-dark-blue)">
		<div class="bg-c" style="--bg: var(--mode-bg);">
			&nbsp;<span id="mode">Normal</span>&nbsp;
		</div>
		<div class="slanted" style="--bg1: var(--mode-bg); --bg2: var(--one-dark-coral);" />
		<div class="bg-c" style="--bg: var(--one-dark-coral);">
			&nbsp;<i class="nf nf-dev-git_branch" style="position:relative;top: 1pt;"/>main&nbsp;
		</div>
		<div class="slanted" style="--bg1: var(--one-dark-coral); --bg2: transparent;" />
	</div>
	<div class="bottom-bar">
	</div>
</Layout>

<style lang="scss">
	#vim-bar {
		background: var(--text-normal);
		color: var(--darkest-bg);
		width: 100%;
		height: var(--line-height);
		position: absolute;
		bottom: var(--line-height);
		display: flex;
		flex-direction: row;
	}	
	.bottom-bar {
		background: var(--dark-bg);
		width: 100%;
		height: var(--line-height);
		position: absolute;
		bottom: 0;
	}

	.bg-c {
		color: var(--fg);
		background-color: var(--bg);
		width: fit-content;
		height: var(--line-height);
		display: flex;
		flex-direction: row;
	}
	.slanted {
		width: 1ch;
		height: var(--line-height);
		background: linear-gradient(calc(90deg - 45deg / 2), var(--bg1) 50%, var(--bg2) 50%);
	}

	#main-content {
		min-height: calc(100% - 2 * var(--line-height));
		outline: none;
	}
</style>

<script>
	// @ts-ignore
	const mode: HTMLElement = document.getElementById('mode');
	// @ts-ignore
	const mainContent: HTMLElement = document.getElementById('main-content');
	// @ts-ignore
	const vimBar: HTMLElement = document.getElementById('vim-bar');

	const NORMAL = 'Normal';
	const INSERT = 'Insert';
	const VISUAL = 'Visual';
	const VISUAL_INSERT = 'Visual (I)';

	const setNormalMode = () => {
		mode.innerText = NORMAL;
		vimBar.style.setProperty('--mode-bg', 'var(--one-dark-blue)');
	};
	const setInsertMode = () => {
		mode.innerText = INSERT;
		vimBar.style.setProperty('--mode-bg', 'var(--one-dark-green)');
	};
	const setVisualMode = () => {
		mode.innerText = VISUAL;
		vimBar.style.setProperty('--mode-bg', 'var(--one-dark-purple)');
	};
	const setVisualInsertMode = () => {
		mode.innerText = VISUAL_INSERT;
		vimBar.style.setProperty('--mode-bg', 'var(--one-dark-purple)');
	};
	const getMode = () => mode.innerText;

	mainContent.onkeydown = (e) => {
		// @ts-ignore
		const selecting: boolean = document.getSelection() && document.getSelection().toString() !== '';
		const shifting: boolean = e.shiftKey;
		const mode = getMode();

		if (e.key === 'Escape') {
			if (mode.startsWith(VISUAL) && selecting) {
				return;
			}
			return setNormalMode();
		}
		
		if (getMode() === NORMAL) {
			if (e.key === 'i') {
				setInsertMode();
				e.preventDefault();
			}
			return;
		}

		if (e.key.startsWith('Arrow')) {
			if (mode === VISUAL && !shifting) {
				setNormalMode();
			} else if (mode === VISUAL_INSERT && !shifting) {
				setInsertMode();
			} else if (mode === NORMAL && shifting) {
				setVisualMode();
			}
			return;
		}
		if (["Shift", "Control", "Alt", "Meta"].includes(e.key) || e.key.startsWith("F"))
			return;

		setInsertMode();
	};
	mainContent.onselectstart = () => {
		if (getMode() === INSERT) {
			setVisualInsertMode();
		} else {
			setVisualMode();
		}
	};
	mainContent.onmouseup = () => {
		const selection = document.getSelection();
		if ((!selection || selection.toString() === '') && getMode().startsWith(VISUAL)) {
			if (getMode() === VISUAL_INSERT) {
				setInsertMode();
			} else {
				setNormalMode();
			}
		}
	};
</script>
