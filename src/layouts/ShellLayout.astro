---
import Layout, { type Props as TermProps } from './TerminalLayout.astro';


interface FileItem {
	fileType: "image" | "text" | "html" | "youtube";
	content: string;
}
type File = [FileItem]; // Purely for deserialisation

type DirectoryItem = Directory | File;
interface Directory {
	[x: string]: DirectoryItem;
}

interface ShellProps {
	fileSystem: Directory;
	defaultPath?: string[];
};
type Props = ShellProps & TermProps;

const { 
	fileSystem, 
	defaultPath = [],
	title
} = Astro.props;
---

<Layout
	title={title}
>
	<main 
		id="shell" 
		tabindex="0"
		data-filesystem={JSON.stringify(fileSystem)}
		data-default-path={defaultPath.join("/")}
	>
		<main>
			<slot />
		</main>
		<div id="input-line">
			<span id="live-ps1" class="ps1-prompt sucess">$</span>
			<div 
				id="shell-input"
				role="textbox"
				aria-multiline="false"
				contenteditable="plaintext-only"
				spellcheck="false"
				autofocus
				tabindex="0"
			>
			</div>
		</div>
	</main>
</Layout>

<style type="scss">
	#shell {
		width: 100%;
		height: 100%;
		overflow-x: hidden;
		overflow-y: auto;
		padding-bottom: 5ch;

		.img-container {
			display: inline-block;
			overflow: hidden;
			// background-color: var(--darker-bg);
			border: 1px solid var(--text-muted);

			background: repeating-conic-gradient(var(--darker-bg) 0% 25%, var(--dark-bg) 0% 50%) 50% / 20px 20px;
			
			> img {
				display: block;
				max-width: 60ch;
				max-height: 40ch;

				animation: 1s steps(16, end) image-slide-render;
			}
		}
	}
	#shell-input {
		all: unset;
		width: auto;
		word-break: break-all;
	}

	@keyframes image-slide-render {
		from {
			clip-path: inset(0 0 100% 0);
		}
		to {
			clip-path: inset(0 0 0 0);
		}
	}
</style>

<style type="scss" is:global>
	#shell .ps1-prompt.sucess {
		color: var(--one-dark-blue);
	}
	#shell .ps1-prompt.fail {
		color: var(--one-dark-coral);
	}

	.yt-video {
		all: unset;

		--ratio: 16 / 9;
		--height: 16;
		height: calc(var(--height) * var(--line-height));
		width: calc(var(--height) * var(--ratio) * var(--line-height));
	}
</style>

<script>
	// @ts-ignore
	const inner: HTMLElement = document.getElementById("terminal-inner");
	// @ts-ignore
	const shell: HTMLElement = document.getElementById("shell");
	// @ts-ignore
	const inputLine: HTMLElement = document.getElementById("input-line");
	// @ts-ignore
	const input: HTMLDivElement = document.getElementById("shell-input");
	// @ts-ignore
	const livePS1: HTMLElement = document.getElementById("live-ps1");

	inner.onclick = (event) => {
		// Do nothing if selecting
		if (window.getSelection()?.toString()) return;

		input.focus();
	};

	interface FileItem {
		fileType: "image" | "text" | "html" | "youtube";
		content: string;
	}
	type File = [FileItem]; // Purely for deserialisation

	type DirectoryItem = Directory | File;
	interface Directory {
		[x: string]: DirectoryItem;
	}

	let fileSystem = JSON.parse(shell.dataset.filesystem as string) as Directory;

	type Command = (...args: string[]) => [boolean, string | HTMLElement | null];

	const clearCmd: Command = () => {
		while (shell.children.length > 1) 
			shell.removeChild(shell.children[0]);
		return [true, null];
	}
	let currentPath: string[] = (shell.dataset.defaultPath as string).split("/").filter((part) => part !== "");

	function deepAccess(nestedObjects: any, path: string[]): any {
		return path.reduce((acc, key) => acc[key], nestedObjects);
	}

	const isFile = (item: DirectoryItem): item is File => {
		return item instanceof Array;
	}

	function relativeToCurrent(fs: Directory, pathParts: string[]): string[] | undefined {
		let currentDir = fs;
		let curPath = currentPath.slice();

		if (pathParts[0] === "") {  // Go to root
			curPath = [];
			pathParts.shift();
			if (pathParts[0] === "" && pathParts.length === 1)
				return undefined;
		}
		if (pathParts[pathParts.length - 1] === "") {
			pathParts.pop();
		}

		for (const part of pathParts) {
			if (part === ".") 
				continue;
			if (part === "..") {
				curPath.pop();
				continue;
			}
			const nextDir = deepAccess(currentDir, curPath);
			if (nextDir[part] === undefined || isFile(nextDir[part])) {
				return undefined;
			}
			curPath.push(part);
		}

		return curPath;
	}

	const commands: Record<string, Command> = {
		"help": () => {
			return [true, "Available commands: " + Object.keys(commands).sort().join(", ")];
		},
		"cls": clearCmd,
		"clear": clearCmd,
		"echo": (...args: string[]) => {
			// I know there will be issues not preserving spaces, idrc
			return [true, args.join(" ")];
		},
		"pwd": () => {
			return [true, "/" + currentPath.join("/")];
		},
		"ls": (path: string | undefined) => {
			const dir = path ? relativeToCurrent(fileSystem, path.split("/")) : currentPath;
			if (dir === undefined) {
				return [false, `Directory ${path} not found`];
			}
			const currentDir = deepAccess(fileSystem, dir);
			const items = Object.keys(currentDir).sort();
			return [true, items.map((item) => {
				return isFile(currentDir[item]) ? item : item + "/";
			}).join(" ")];
		},
		"cd": (path: string) => {
			const newPath = relativeToCurrent(fileSystem, path.split("/"));
			if (newPath === undefined) {
				return [false, `Directory ${path} not found`];
			}
			currentPath = newPath;
			return [true, null];
		},
		"cat": (path: string) => {
			if (!path) {
				return [false, "No file specified"];
			}

			// The last part of our path is a file
			const dirPath = path.split("/").slice(0, -1);
			const file = path.split("/").pop();
			if (file === undefined)
				return [false, "Invalid path"];

			const dir = relativeToCurrent(fileSystem, dirPath);
			if (dir === undefined) {
				return [false, `Directory ${dirPath} not found`];
			}
			const currentDir = deepAccess(fileSystem, dir);
			const fileItem = currentDir[file];
			if (isFile(fileItem)) {
				const {fileType, content} = fileItem[0];
				if (fileType === "image") {
					const img = document.createElement("img");
					img.src = content;

					const container = document.createElement("div");
					container.classList.add("img-container");
					container.appendChild(img);

					return [true, container];
				} else if (fileType === "html") {
					const element = document.createElement("div");
					element.innerHTML = content;
					return [true, element];
				} else if (fileType === "youtube") { // YouTube Video URL
					var url = new URL(content);
					url.searchParams.set("disablekb", "1");
					url.searchParams.set("color", "white");
					url.searchParams.set("rel", "0");

					const element = document.createElement("iframe");
					element.src = url.toString();
					element.classList.add("yt-video");
					element.referrerPolicy = "strict-origin-when-cross-origin";
					element.allowFullscreen = true;
					return [true, element];
				} else {
					return [true, content];
				}
			}
			return [false, `File ${file} not found`];
		},
		"exit": () => {
			window.location.href = "/";
			return [true, null];
		},
	};

	const insertResult = (result: string | HTMLElement) => {
		if (typeof result === "string") {
			const resultElement = document.createElement("div");
			resultElement.innerText = result;
			shell.insertBefore(resultElement, inputLine);
		} else if (result instanceof HTMLElement) {
			shell.insertBefore(result, inputLine);
		}
	};

	const getPS1 = () => {
		const path = "/" + currentPath.join("/");
		return `${path} $`;
	};
	livePS1.innerText = getPS1();

	input.onkeydown = (event) => {
		if (event.key === "Enter") runCommand(event);
	};

	const runCommand = (event: KeyboardEvent) => {
		event.preventDefault();

		const command = input.innerText.trim();

		const parts = command.split(" ").map((arg) => arg.trim()).filter((arg) => arg !== "")
		const binary = parts[0];
		const args = parts.slice(1);
		const commandCallback: Command | undefined = commands[binary];

		input.innerHTML = "";
		// Append the command to the terminal
		const commandElement = document.createElement("div");
		commandElement.innerText = command;
		const ps1Prompt = document.createElement("span");
		ps1Prompt.innerText = getPS1() + " ";
		ps1Prompt.classList.add("ps1-prompt");
		ps1Prompt.classList.add(commandCallback === undefined ? "fail" : "sucess");
		commandElement.insertBefore(ps1Prompt, commandElement.firstChild);
		shell.insertBefore(commandElement, inputLine);

		// Scroll to the bottom of the terminal
		shell.scrollTop = shell.scrollHeight;

		// Execute the command
		if (commandCallback) {
			const output = commandCallback(...args);
			const [success, result] = output instanceof Array ? output : [output, undefined];

			if (!success) {
				insertResult(result ? `Command ${binary} failed: ${result}` : `Command ${binary} failed`);
				return;
			}

			if (result) {
				insertResult(result);
			}

			shell.scrollTop = shell.scrollHeight;
		} else {
			insertResult(`Command ${binary} not found`);
		}
		
		livePS1.innerText = getPS1();
	};
</script>
